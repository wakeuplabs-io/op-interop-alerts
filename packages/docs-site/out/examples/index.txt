2:I[79550,["231","static/chunks/231-d3fb88463de409bd.js","897","static/chunks/897-d672c0d1c9e62386.js","668","static/chunks/app/examples/page-db09046c5213457e.js"],"CodeTabs"]
3:I[79550,["231","static/chunks/231-d3fb88463de409bd.js","897","static/chunks/897-d672c0d1c9e62386.js","668","static/chunks/app/examples/page-db09046c5213457e.js"],"TabPanel"]
4:I[79550,["231","static/chunks/231-d3fb88463de409bd.js","897","static/chunks/897-d672c0d1c9e62386.js","668","static/chunks/app/examples/page-db09046c5213457e.js"],"default"]
9:I[231,["231","static/chunks/231-d3fb88463de409bd.js","897","static/chunks/897-d672c0d1c9e62386.js","668","static/chunks/app/examples/page-db09046c5213457e.js"],""]
a:I[39275,[],""]
b:I[61343,[],""]
c:I[12292,["231","static/chunks/231-d3fb88463de409bd.js","185","static/chunks/app/layout-63c6c6c5ccaf3884.js"],"default"]
d:I[78573,["231","static/chunks/231-d3fb88463de409bd.js","185","static/chunks/app/layout-63c6c6c5ccaf3884.js"],"default"]
5:T103d,import { 
  startTracking, 
  generateMetrics, 
  TrackingResult,
  InteropMetrics,
  hasConsecutiveFailures,
  getConsecutiveFailureCount
} from '@wakeuplabs/op-interop-alerts-sdk';
import { chainsInfoMock } from '@wakeuplabs/op-interop-alerts-sdk/config';

// Configuration
const pksInfo = {
  origin: process.env.ORIGIN_PRIVATE_KEY as `0x${string}`,
  destination: process.env.DESTINATION_PRIVATE_KEY as `0x${string}`,
};

const TRACKING_INTERVAL_MINUTES = 10;
const METRICS_THRESHOLD = 3; // Generate metrics after 3 data points

// Storage for tracking results
const trackingResults: TrackingResult[] = [];

// Tracking callback with basic logging
const trackingCallback = (result: TrackingResult) => {
  const timestamp = result.timestamp.toISOString();
  
  console.log(`\n=== [${timestamp}] TRACKING CYCLE ===`);
  
  if (result.success && result.data) {
    const { sentMessage, relayMessage } = result.data;
    const latency = relayMessage.localTimestamp.getTime() - sentMessage.localTimestamp.getTime();
    
    console.log('✅ Cross-chain message successful');
    console.log(`   Latency: ${(latency / 1000).toFixed(2)}s`);
    console.log(`   Send Gas: ${sentMessage.gasUsed.toString()}`);
    console.log(`   Relay Gas: ${relayMessage.gasUsed.toString()}`);
    console.log(`   Send Tx: ${sentMessage.transactionHash}`);
    console.log(`   Relay Tx: ${relayMessage.transactionHash}`);
  } else {
    console.log('❌ Cross-chain message failed');
    if (result.error) {
      console.log(`   Error: ${result.error.error.message}`);
    }
  }
  
  // Store result for metrics
  trackingResults.push(result);
  console.log(`   Total results: ${trackingResults.length}`);
  
  // Check for consecutive failures
  if (hasConsecutiveFailures(trackingResults, 3)) {
    const failureCount = getConsecutiveFailureCount(trackingResults);
    console.log(`⚠️  WARNING: ${failureCount} consecutive failures detected!`);
  }
  
  // Generate metrics when we have enough data
  if (trackingResults.length >= METRICS_THRESHOLD) {
    displayMetrics();
  }
  
  console.log('=== END CYCLE ===\n');
};

function displayMetrics() {
  try {
    const metrics: InteropMetrics = generateMetrics(trackingResults);
    
    console.log('\n📊 === METRICS SUMMARY ===');
    console.log(`System Status: ${metrics.status.interopStatus} (${metrics.status.healthLevel})`);
    console.log(`Success Rate: ${metrics.coreMetrics.throughput.successRate.toFixed(1)}%`);
    console.log(`Average Latency: ${(metrics.coreMetrics.latency.averageLatencyMs / 1000).toFixed(1)}s`);
    console.log(`P95 Latency: ${(metrics.coreMetrics.latency.p95LatencyMs / 1000).toFixed(1)}s`);
    console.log(`Messages/Hour: ${metrics.coreMetrics.throughput.messagesPerHour.toFixed(1)}`);
    
    if (metrics.health.alerts.length > 0) {
      console.log('\n🚨 Health Alerts:');
      metrics.health.alerts.forEach((alert, i) => {
        console.log(`  ${i + 1}. [${alert.level}] ${alert.message}`);
      });
    }
    
    if (metrics.health.recommendations.length > 0) {
      console.log('\n💡 Recommendations:');
      metrics.health.recommendations.forEach((rec, i) => {
        console.log(`  ${i + 1}. ${rec}`);
      });
    }
    
    console.log('=== END METRICS ===\n');
  } catch (error) {
    console.error('❌ Error generating metrics:', error);
  }
}

// Start monitoring
async function main() {
  console.log('🚀 Starting OP Interop Basic Monitoring');
  console.log(`📊 Tracking interval: ${TRACKING_INTERVAL_MINUTES} minutes`);
  console.log(`📈 Metrics threshold: ${METRICS_THRESHOLD} data points\n`);
  
  try {
    await startTracking(
      chainsInfoMock, 
      pksInfo, 
      trackingCallback, 
      TRACKING_INTERVAL_MINUTES
    );
  } catch (error) {
    console.error('❌ Monitoring failed:', error);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\n👋 Shutting down monitoring...');
  if (trackingResults.length > 0) {
    console.log(`📊 Final metrics from ${trackingResults.length} data points:`);
    displayMetrics();
  }
  process.exit(0);
});

main().catch(console.error);6:Tfcf,const { 
  startTracking, 
  generateMetrics, 
  hasConsecutiveFailures,
  getConsecutiveFailureCount
} = require('@wakeuplabs/op-interop-alerts-sdk');
const { chainsInfoMock } = require('@wakeuplabs/op-interop-alerts-sdk/config');

// Configuration
const pksInfo = {
  origin: process.env.ORIGIN_PRIVATE_KEY,
  destination: process.env.DESTINATION_PRIVATE_KEY,
};

const TRACKING_INTERVAL_MINUTES = 10;
const METRICS_THRESHOLD = 3; // Generate metrics after 3 data points

// Storage for tracking results
const trackingResults = [];

// Tracking callback with basic logging
const trackingCallback = (result) => {
  const timestamp = result.timestamp.toISOString();
  
  console.log(`\n=== [${timestamp}] TRACKING CYCLE ===`);
  
  if (result.success && result.data) {
    const { sentMessage, relayMessage } = result.data;
    const latency = relayMessage.localTimestamp.getTime() - sentMessage.localTimestamp.getTime();
    
    console.log('✅ Cross-chain message successful');
    console.log(`   Latency: ${(latency / 1000).toFixed(2)}s`);
    console.log(`   Send Gas: ${sentMessage.gasUsed.toString()}`);
    console.log(`   Relay Gas: ${relayMessage.gasUsed.toString()}`);
    console.log(`   Send Tx: ${sentMessage.transactionHash}`);
    console.log(`   Relay Tx: ${relayMessage.transactionHash}`);
  } else {
    console.log('❌ Cross-chain message failed');
    if (result.error) {
      console.log(`   Error: ${result.error.error.message}`);
    }
  }
  
  // Store result for metrics
  trackingResults.push(result);
  console.log(`   Total results: ${trackingResults.length}`);
  
  // Check for consecutive failures
  if (hasConsecutiveFailures(trackingResults, 3)) {
    const failureCount = getConsecutiveFailureCount(trackingResults);
    console.log(`⚠️  WARNING: ${failureCount} consecutive failures detected!`);
  }
  
  // Generate metrics when we have enough data
  if (trackingResults.length >= METRICS_THRESHOLD) {
    displayMetrics();
  }
  
  console.log('=== END CYCLE ===\n');
};

function displayMetrics() {
  try {
    const metrics = generateMetrics(trackingResults);
    
    console.log('\n📊 === METRICS SUMMARY ===');
    console.log(`System Status: ${metrics.status.interopStatus} (${metrics.status.healthLevel})`);
    console.log(`Success Rate: ${metrics.coreMetrics.throughput.successRate.toFixed(1)}%`);
    console.log(`Average Latency: ${(metrics.coreMetrics.latency.averageLatencyMs / 1000).toFixed(1)}s`);
    console.log(`P95 Latency: ${(metrics.coreMetrics.latency.p95LatencyMs / 1000).toFixed(1)}s`);
    console.log(`Messages/Hour: ${metrics.coreMetrics.throughput.messagesPerHour.toFixed(1)}`);
    
    if (metrics.health.alerts.length > 0) {
      console.log('\n🚨 Health Alerts:');
      metrics.health.alerts.forEach((alert, i) => {
        console.log(`  ${i + 1}. [${alert.level}] ${alert.message}`);
      });
    }
    
    if (metrics.health.recommendations.length > 0) {
      console.log('\n💡 Recommendations:');
      metrics.health.recommendations.forEach((rec, i) => {
        console.log(`  ${i + 1}. ${rec}`);
      });
    }
    
    console.log('=== END METRICS ===\n');
  } catch (error) {
    console.error('❌ Error generating metrics:', error);
  }
}

// Start monitoring
async function main() {
  console.log('🚀 Starting OP Interop Basic Monitoring');
  console.log(`📊 Tracking interval: ${TRACKING_INTERVAL_MINUTES} minutes`);
  console.log(`📈 Metrics threshold: ${METRICS_THRESHOLD} data points\n`);
  
  try {
    await startTracking(
      chainsInfoMock, 
      pksInfo, 
      trackingCallback, 
      TRACKING_INTERVAL_MINUTES
    );
  } catch (error) {
    console.error('❌ Monitoring failed:', error);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\n👋 Shutting down monitoring...');
  if (trackingResults.length > 0) {
    console.log(`📊 Final metrics from ${trackingResults.length} data points:`);
    displayMetrics();
  }
  process.exit(0);
});

main().catch(console.error);7:T20eb,import { 
  startTracking, 
  generateMetrics, 
  processAlerts,
  createAlertContext,
  createSimpleNotificationCallback,
  DEFAULT_ALERT_RULES,
  TrackingResult,
  InteropMetrics,
  AlertNotification,
  NotificationChannel
} from '@wakeuplabs/op-interop-alerts-sdk';
import { chainsInfoMock } from '@wakeuplabs/op-interop-alerts-sdk/config';

// Configuration
const pksInfo = {
  origin: process.env.ORIGIN_PRIVATE_KEY as `0x${string}`,
  destination: process.env.DESTINATION_PRIVATE_KEY as `0x${string}`,
};

const TRACKING_INTERVAL_MINUTES = parseInt(process.env.TRACKING_INTERVAL_MINUTES || "5");
const STATUS_REPORT_INTERVAL = 12; // Send status every 12 iterations (1 hour if 5min intervals)

// Slack configuration
const slackConfig = {
  webhookUrl: process.env.SLACK_WEBHOOK_URL,
  channel: process.env.SLACK_CHANNEL || '#interop-alerts',
  username: process.env.SLACK_USERNAME || 'OP Interop Monitor',
  iconEmoji: process.env.SLACK_ICON_EMOJI || ':zap:'
};

// Storage and counters
const trackingResults: TrackingResult[] = [];
let iterationCount = 0;
const startTime = Date.now();

// Slack notification helper
async function sendSlackMessage(
  message: string, 
  color: 'good' | 'warning' | 'danger' = 'good'
): Promise<boolean> {
  if (!slackConfig.webhookUrl) {
    console.log('📱 Slack not configured, logging message:', message);
    return false;
  }
  
  try {
    const payload = {
      username: slackConfig.username,
      icon_emoji: slackConfig.iconEmoji,
      channel: slackConfig.channel,
      attachments: [{
        color,
        text: message,
        footer: 'OP Interop Alerts',
        ts: Math.floor(Date.now() / 1000)
      }]
    };

    const response = await fetch(slackConfig.webhookUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    return response.ok;
  } catch (error) {
    console.error('❌ Error sending Slack message:', error);
    return false;
  }
}

// Alert notification callback
const alertNotificationCallback = createSimpleNotificationCallback({
  [NotificationChannel.SLACK]: async (notification: AlertNotification) => {
    const { alert, rule, context } = notification;
    
    console.log(`🚨 ALERT TRIGGERED: [${alert.severity}] ${alert.title}`);
    
    let slackMessage = `🚨 *${alert.title}*\n`;
    slackMessage += `*Severity:* ${alert.severity}\n`;
    slackMessage += `*Category:* ${alert.category}\n`;
    slackMessage += `*Message:* ${alert.message}\n`;
    
    // Add key metrics
    const metrics = context.metrics;
    slackMessage += `\n*📊 Current Status:*\n`;
    slackMessage += `• System: ${metrics.status.interopStatus} (${metrics.status.healthLevel})\n`;
    slackMessage += `• Success Rate: ${metrics.coreMetrics.throughput.successRate.toFixed(1)}%\n`;
    slackMessage += `• Avg Latency: ${(metrics.coreMetrics.latency.averageLatencyMs / 1000).toFixed(1)}s\n`;
    
    const color = alert.severity === 'CRITICAL' ? 'danger' : 'warning';
    const success = await sendSlackMessage(slackMessage, color);
    
    if (success) {
      console.log('✅ Alert sent to Slack');
    } else {
      console.log('❌ Failed to send alert to Slack');
    }
  }
});

// Status report function
async function sendStatusReport(metrics: InteropMetrics, iteration: number) {
  const uptime = Math.floor((Date.now() - startTime) / 1000 / 60); // minutes
  
  let statusMessage = `✅ *OP Interop Status: Healthy*\n`;
  statusMessage += `*Iteration:* ${iteration}\n`;
  statusMessage += `*Uptime:* ${uptime} minutes\n\n`;
  
  statusMessage += `*📊 Current Metrics:*\n`;
  statusMessage += `• Status: ${metrics.status.interopStatus} (${metrics.status.healthLevel})\n`;
  statusMessage += `• Success Rate: ${metrics.coreMetrics.throughput.successRate.toFixed(1)}%\n`;
  statusMessage += `• Avg Latency: ${(metrics.coreMetrics.latency.averageLatencyMs / 1000).toFixed(1)}s\n`;
  statusMessage += `• P95 Latency: ${(metrics.coreMetrics.latency.p95LatencyMs / 1000).toFixed(1)}s\n`;
  statusMessage += `• Messages/Hour: ${metrics.coreMetrics.throughput.messagesPerHour.toFixed(1)}\n`;
  statusMessage += `• Total Messages: ${metrics.coreMetrics.throughput.totalMessages}`;
  
  const success = await sendSlackMessage(statusMessage, 'good');
  console.log(success ? '✅ Status report sent to Slack' : '❌ Failed to send status report');
}

// Alert processing function
async function processAlertsForMetrics(metrics: InteropMetrics, trackingData: TrackingResult[]) {
  try {
    const alertContext = createAlertContext(
      metrics,
      trackingData,
      undefined,
      60 * 60 * 1000 // 1 hour time window
    );

    const alertResults = await processAlerts(
      DEFAULT_ALERT_RULES,
      alertContext,
      alertNotificationCallback
    );

    const triggeredAlerts = alertResults.filter(result => result.triggered);
    console.log(`📋 Alert processing: ${alertResults.length} rules, ${triggeredAlerts.length} triggered`);

    if (triggeredAlerts.length > 0) {
      console.log('🚨 Triggered alerts:');
      triggeredAlerts.forEach((result, index) => {
        console.log(`   ${index + 1}. [${result.alert?.severity}] ${result.rule.name}`);
      });
    }

    return triggeredAlerts.length === 0;
  } catch (error) {
    console.error('❌ Error processing alerts:', error);
    return false;
  }
}

// Main tracking callback
const trackingCallback = async (result: TrackingResult) => {
  console.log(`\n=== [${result.timestamp.toISOString()}] PRODUCTION MONITORING ===`);
  
  if (result.success && result.data) {
    const { sentMessage, relayMessage } = result.data;
    const latency = relayMessage.localTimestamp.getTime() - sentMessage.localTimestamp.getTime();
    
    console.log(`✅ Cross-chain operation successful (${(latency / 1000).toFixed(2)}s latency)`);
  } else {
    console.log(`❌ Cross-chain operation failed: ${result.error?.error.message}`);
  }
  
  trackingResults.push(result);
  
  // Generate metrics and process alerts
  if (trackingResults.length >= 1) {
    const metrics = generateMetrics(trackingResults);
    console.log(`📊 System: ${metrics.status.interopStatus} | Health: ${metrics.status.healthLevel}`);
    
    const systemHealthy = await processAlertsForMetrics(metrics, trackingResults);
    
    // Send periodic status reports when system is healthy
    if (systemHealthy) {
      iterationCount++;
      if (iterationCount === 1 || iterationCount % STATUS_REPORT_INTERVAL === 0) {
        console.log(`📡 Sending status report (iteration ${iterationCount})`);
        await sendStatusReport(metrics, iterationCount);
      }
    } else {
      console.log('⚠️  Status report skipped due to active alerts');
    }
  }
  
  console.log('=== END MONITORING CYCLE ===\n');
};

// Startup notification
async function sendStartupNotification() {
  const message = `🚀 *OP Interop Monitor Started*\n` +
    `*Interval:* ${TRACKING_INTERVAL_MINUTES} minutes\n` +
    `*Origin:* Chain ${chainsInfoMock.chainOrigin.chainId}\n` +
    `*Destination:* Chain ${chainsInfoMock.chainDestination.chainId}\n` +
    `*Status Reports:* Every ${STATUS_REPORT_INTERVAL} cycles`;
  
  await sendSlackMessage(message, 'good');
}

// Main function
async function main() {
  console.log('🚀 Starting OP Interop Production Monitoring');
  console.log(`📊 Configuration:`);
  console.log(`   - Tracking interval: ${TRACKING_INTERVAL_MINUTES} minutes`);
  console.log(`   - Status reports: Every ${STATUS_REPORT_INTERVAL} cycles`);
  console.log(`   - Slack alerts: ${slackConfig.webhookUrl ? 'Enabled' : 'Disabled'}`);
  console.log(`   - Origin chain: ${chainsInfoMock.chainOrigin.chainId}`);
  console.log(`   - Destination chain: ${chainsInfoMock.chainDestination.chainId}\n`);
  
  await sendStartupNotification();
  
  try {
    await startTracking(
      chainsInfoMock, 
      pksInfo, 
      trackingCallback, 
      TRACKING_INTERVAL_MINUTES
    );
  } catch (error) {
    console.error('❌ Production monitoring failed:', error);
    await sendSlackMessage(`🚨 *Monitor Crashed*\n${error}`, 'danger');
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n👋 Shutting down production monitor...');
  await sendSlackMessage('🛑 *OP Interop Monitor Stopped*', 'warning');
  process.exit(0);
});

main().catch(console.error);8:T978,import { 
  startTracking, 
  generateMetrics,
  TrackingResult,
  ChainsInfo
} from '@wakeuplabs/op-interop-alerts-sdk';

// Custom chain configuration for OP Sepolia <-> Base Sepolia
const customChainsInfo: ChainsInfo = {
  chainOrigin: {
    chainId: 11155420, // OP Sepolia
    rpcUrl: 'https://sepolia.optimism.io',
    l2ToL2CrossDomainMessengerAddress: '0x4200000000000000000000000000000000000023',
    messageReceiverAddress: '0x...' // Your deployed MessageReceiver contract
  },
  chainDestination: {
    chainId: 84532, // Base Sepolia  
    rpcUrl: 'https://sepolia.base.org',
    l2ToL2CrossDomainMessengerAddress: '0x4200000000000000000000000000000000000023',
    messageReceiverAddress: '0x...' // Your deployed MessageReceiver contract
  }
};

const pksInfo = {
  origin: process.env.ORIGIN_PRIVATE_KEY as `0x${string}`,
  destination: process.env.DESTINATION_PRIVATE_KEY as `0x${string}`,
};

const trackingResults: TrackingResult[] = [];

const trackingCallback = (result: TrackingResult) => {
  console.log(`\n=== Custom Chains Monitoring ===`);
  console.log(`Time: ${result.timestamp.toISOString()}`);
  console.log(`OP Sepolia -> Base Sepolia: ${result.success ? '✅' : '❌'}`);
  
  if (result.success && result.data) {
    const latency = result.data.relayMessage.localTimestamp.getTime() - 
                   result.data.sentMessage.localTimestamp.getTime();
    console.log(`Latency: ${(latency / 1000).toFixed(2)}s`);
  }
  
  trackingResults.push(result);
  
  // Generate metrics every 5 results
  if (trackingResults.length % 5 === 0) {
    const metrics = generateMetrics(trackingResults);
    console.log(`\n📊 Metrics Summary (last ${trackingResults.length} results):`);
    console.log(`   Success Rate: ${metrics.coreMetrics.throughput.successRate.toFixed(1)}%`);
    console.log(`   Avg Latency: ${(metrics.coreMetrics.latency.averageLatencyMs / 1000).toFixed(1)}s`);
    console.log(`   System Status: ${metrics.status.interopStatus}`);
  }
};

async function main() {
  console.log('🚀 Starting Custom Chains Monitoring');
  console.log(`📍 Monitoring: OP Sepolia (${customChainsInfo.chainOrigin.chainId}) -> Base Sepolia (${customChainsInfo.chainDestination.chainId})`);
  
  try {
    await startTracking(customChainsInfo, pksInfo, trackingCallback, 8);
  } catch (error) {
    console.error('❌ Custom chains monitoring failed:', error);
  }
}

main().catch(console.error);0:["vaz_tpm5HaGxb8wvZm7sd",[[["",{"children":["examples",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["examples",{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"max-w-none sm:max-w-4xl mx-auto","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center space-x-3 mb-4","children":[["$","div",null,{"className":"w-10 h-10 bg-orange/10 rounded-lg flex items-center justify-center","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code w-5 h-5 text-orange","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}]}],["$","h1",null,{"className":"text-3xl font-bold text-midnight","children":"Examples"}]]}],["$","p",null,{"className":"text-lg text-gray-600","children":"Complete examples showing how to use all modules of the OP Interop Alerts SDK together for comprehensive cross-chain monitoring and alerting."}]]}],["$","div",null,{"className":"mb-8","children":[["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Example Overview"}],["$","p",null,{"className":"text-gray-600 mb-6","children":"These examples demonstrate real-world usage patterns combining tracking, metrics generation, and intelligent alerting. Each example is complete and ready to run."}],["$","div",null,{"className":"grid md:grid-cols-3 gap-4 mb-6","children":[["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-4","children":[["$","div",null,{"className":"flex items-center space-x-2 mb-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-code w-4 h-4 text-orange","children":[["$","polyline","z7tu5w",{"points":"16 18 22 12 16 6"}],["$","polyline","1eg1df",{"points":"8 6 2 12 8 18"}],"$undefined"]}],["$","h3",null,{"className":"font-semibold text-gray-900","children":"Basic Monitoring"}]]}],["$","p",null,{"className":"text-sm text-gray-600","children":"Simple setup with console logging and basic metrics"}]]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-4","children":[["$","div",null,{"className":"flex items-center space-x-2 mb-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-triangle-alert w-4 h-4 text-orange","children":[["$","path","wmoenq",{"d":"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"}],["$","path","juzpu7",{"d":"M12 9v4"}],["$","path","p32p05",{"d":"M12 17h.01"}],"$undefined"]}],["$","h3",null,{"className":"font-semibold text-gray-900","children":"Production Monitoring"}]]}],["$","p",null,{"className":"text-sm text-gray-600","children":"Full production setup with Slack alerts and custom rules"}]]}],["$","div",null,{"className":"bg-white border border-gray-200 rounded-lg p-4","children":[["$","div",null,{"className":"flex items-center space-x-2 mb-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-bar-chart3 w-4 h-4 text-orange","children":[["$","path","1s2lah",{"d":"M3 3v18h18"}],["$","path","2bz60n",{"d":"M18 17V9"}],["$","path","1frdt8",{"d":"M13 17V5"}],["$","path","17ska0",{"d":"M8 17v-3"}],"$undefined"]}],["$","h3",null,{"className":"font-semibold text-gray-900","children":"Advanced Analytics"}]]}],["$","p",null,{"className":"text-sm text-gray-600","children":"Custom metrics and multi-channel alerting"}]]}]]}]]}],["$","div",null,{"className":"mb-8","children":[["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Basic Monitoring Setup"}],["$","p",null,{"className":"text-gray-600 mb-6","children":"A simple example that demonstrates the core functionality with console output:"}],["$","$L2",null,{"children":[["$","$L3",null,{"label":"TypeScript","children":["$","$L4",null,{"language":"typescript","filename":"basic-monitoring.ts","children":"$5"}]}],["$","$L3",null,{"label":"JavaScript","children":["$","$L4",null,{"language":"javascript","filename":"basic-monitoring.js","children":"$6"}]}]]}]]}],["$","div",null,{"className":"mb-8","children":[["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Production Monitoring with Slack Alerts"}],["$","p",null,{"className":"text-gray-600 mb-6","children":"A production-ready example with Slack notifications and comprehensive alerting:"}],["$","$L2",null,{"children":[["$","$L3",null,{"label":"TypeScript","children":["$","$L4",null,{"language":"typescript","filename":"production-monitoring.ts","children":"$7"}]}],["$","$L3",null,{"label":"Environment Variables","children":["$","$L4",null,{"language":"bash","filename":".env","children":"# Required: Private keys\nORIGIN_PRIVATE_KEY=0x...\nDESTINATION_PRIVATE_KEY=0x...\n\n# Optional: Tracking configuration\nTRACKING_INTERVAL_MINUTES=5\n\n# Slack configuration\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/...\nSLACK_CHANNEL=#interop-alerts\nSLACK_USERNAME=OP Interop Monitor\nSLACK_ICON_EMOJI=:zap:\n\n# Optional: Custom webhook for additional notifications\nCUSTOM_WEBHOOK_URL=https://your-api.com/webhooks/alerts\nWEBHOOK_TOKEN=your-auth-token"}]}]]}]]}],["$","div",null,{"className":"mb-8","children":[["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Custom Chain Configuration"}],["$","p",null,{"className":"text-gray-600 mb-6","children":"Example showing how to monitor custom chains instead of the default mock configuration:"}],["$","$L4",null,{"language":"typescript","filename":"custom-chains-monitoring.ts","children":"$8"}]]}],["$","div",null,{"className":"mb-8","children":[["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Package Configuration"}],["$","p",null,{"className":"text-gray-600 mb-6","children":"Example `package.json` and scripts for your monitoring project:"}],["$","$L2",null,{"children":[["$","$L3",null,{"label":"package.json","children":["$","$L4",null,{"language":"json","filename":"package.json","children":"{\n  \"name\": \"my-interop-monitor\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Cross-chain monitoring for OP Superchain\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"dev\": \"tsx watch src/index.ts\",\n    \"build\": \"tsc\",\n    \"start\": \"node dist/index.js\",\n    \"start:basic\": \"tsx src/basic-monitoring.ts\",\n    \"start:production\": \"tsx src/production-monitoring.ts\",\n    \"start:custom\": \"tsx src/custom-chains-monitoring.ts\",\n    \"test\": \"tsx src/test-installation.ts\"\n  },\n  \"dependencies\": {\n    \"@wakeuplabs/op-interop-alerts-sdk\": \"^0.3.0\",\n    \"dotenv\": \"^16.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"tsx\": \"^4.0.0\",\n    \"typescript\": \"^5.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  }\n}"}]}],["$","$L3",null,{"label":"tsconfig.json","children":["$","$L4",null,{"language":"json","filename":"tsconfig.json","children":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2022\"],\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}"}]}]]}]]}],["$","div",null,{"className":"mb-8","children":[["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Running the Examples"}],["$","p",null,{"className":"text-gray-600 mb-6","children":"Follow these steps to run the examples in your own project:"}],["$","div",null,{"className":"bg-gray-50 border border-gray-200 rounded-lg p-6","children":[["$","h3",null,{"className":"font-semibold text-gray-900 mb-3","children":"Step-by-step Setup"}],["$","div",null,{"className":"space-y-4","children":[["$","div",null,{"className":"flex items-start space-x-3","children":[["$","div",null,{"className":"w-6 h-6 bg-orange text-white rounded-full flex items-center justify-center text-sm font-bold","children":"1"}],["$","div",null,{"children":[["$","h4",null,{"className":"font-medium text-gray-900","children":"Create a new project"}],["$","$L4",null,{"language":"bash","children":"mkdir my-interop-monitor\ncd my-interop-monitor\nnpm init -y"}]]}]]}],["$","div",null,{"className":"flex items-start space-x-3","children":[["$","div",null,{"className":"w-6 h-6 bg-orange text-white rounded-full flex items-center justify-center text-sm font-bold","children":"2"}],["$","div",null,{"children":[["$","h4",null,{"className":"font-medium text-gray-900","children":"Install dependencies"}],["$","$L4",null,{"language":"bash","children":"npm install @wakeuplabs/op-interop-alerts-sdk dotenv\nnpm install -D @types/node tsx typescript"}]]}]]}],["$","div",null,{"className":"flex items-start space-x-3","children":[["$","div",null,{"className":"w-6 h-6 bg-orange text-white rounded-full flex items-center justify-center text-sm font-bold","children":"3"}],["$","div",null,{"children":[["$","h4",null,{"className":"font-medium text-gray-900","children":"Set up environment"}],["$","$L4",null,{"language":"bash","children":"cp .env.example .env\n# Edit .env with your private keys and Slack webhook"}]]}]]}],["$","div",null,{"className":"flex items-start space-x-3","children":[["$","div",null,{"className":"w-6 h-6 bg-orange text-white rounded-full flex items-center justify-center text-sm font-bold","children":"4"}],["$","div",null,{"children":[["$","h4",null,{"className":"font-medium text-gray-900","children":"Copy and run examples"}],["$","$L4",null,{"language":"bash","children":"# Basic monitoring\nnpm run start:basic\n\n# Production monitoring with Slack\nnpm run start:production\n\n# Custom chains monitoring\nnpm run start:custom"}]]}]]}]]}]]}]]}],["$","div",null,{"className":"mb-8","children":["$","div",null,{"className":"bg-orange/5 border border-orange/20 rounded-lg p-6","children":["$","div",null,{"className":"flex items-start space-x-3","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-external-link w-5 h-5 text-orange mt-0.5 flex-shrink-0","children":[["$","path","1q9fwt",{"d":"M15 3h6v6"}],["$","path","gplh6r",{"d":"M10 14 21 3"}],["$","path","a6xqqp",{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],"$undefined"]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-semibold text-midnight mb-2","children":"Complete Example Repository"}],["$","p",null,{"className":"text-gray-700 mb-3","children":"Find the complete working example with all the code shown above in our repository:"}],["$","a",null,{"href":"https://github.com/wakeuplabs-io/op-interop-alerts/tree/develop/packages/example","target":"_blank","rel":"noopener noreferrer","className":"inline-flex items-center px-4 py-2 bg-orange text-white font-medium rounded-lg hover:bg-orange/80 transition-colors","children":["View Example Code",["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-external-link w-4 h-4 ml-2","children":[["$","path","1q9fwt",{"d":"M15 3h6v6"}],["$","path","gplh6r",{"d":"M10 14 21 3"}],["$","path","a6xqqp",{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],"$undefined"]}]]}]]}]]}]}]}],["$","div",null,{"className":"bg-orange/5 border border-orange/20 rounded-lg p-6","children":[["$","h2",null,{"className":"text-xl font-bold text-gray-900 mb-4","children":"Ready to Start Monitoring?"}],["$","p",null,{"className":"text-gray-700 mb-4","children":"These examples provide a solid foundation for monitoring your cross-chain operations. Customize them based on your specific needs and infrastructure."}],["$","div",null,{"className":"flex flex-col sm:flex-row gap-3","children":[["$","$L9",null,{"href":"/installation","className":"inline-flex items-center px-4 py-2 bg-orange text-white font-medium rounded-lg hover:bg-orange/80 transition-colors","children":["Get Started",["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-right w-4 h-4 ml-2","children":[["$","path","1ays0h",{"d":"M5 12h14"}],["$","path","xquz4c",{"d":"m12 5 7 7-7 7"}],"$undefined"]}]]}],["$","div",null,{"className":"flex gap-3","children":[["$","a",null,{"href":"https://www.npmjs.com/package/@wakeuplabs/op-interop-alerts-sdk","target":"_blank","rel":"noopener noreferrer","className":"inline-flex items-center px-4 py-2 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors","children":[["$","img",null,{"src":"/npm-logo-red.png","alt":"NPM","className":"h-3 w-auto mr-2"}],"NPM Package"]}],["$","a",null,{"href":"https://github.com/wakeuplabs-io/op-interop-alerts","target":"_blank","rel":"noopener noreferrer","className":"inline-flex items-center px-4 py-2 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors","children":[["$","img",null,{"src":"/github-mark.png","alt":"GitHub","className":"h-4 w-auto mr-2"}],"Repository"]}]]}]]}]]}]]}]],null],null]},["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","examples","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_1ef16e","children":["$","div",null,{"className":"min-h-screen bg-white","children":[["$","$Lc",null,{}],["$","div",null,{"className":"flex","children":[["$","aside",null,{"className":"hidden md:block w-64 flex-shrink-0","children":["$","div",null,{"className":"sticky top-16 h-screen overflow-y-auto","children":["$","$Ld",null,{}]}]}],["$","main",null,{"className":"flex-1 max-w-none","children":["$","div",null,{"className":"pl-4 pr-4 sm:pl-6 sm:pr-6 lg:pl-8 lg:pr-8 py-8","children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}]]}],["$","footer",null,{"className":"bg-gray-50 border-t border-gray-300","children":["$","div",null,{"className":"px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"flex items-center space-x-4 mb-6 md:mb-0","children":[["$","img",null,{"src":"/logo-wu.png","alt":"WakeUp Labs","className":"h-8 w-auto"}],["$","div",null,{"className":"flex flex-col","children":[["$","span",null,{"className":"text-sm font-medium text-midnight","children":"OP Interop Alerts SDK"}],["$","span",null,{"className":"text-xs text-gray-500","children":"Cross-chain monitoring documentation"}]]}]]}],["$","div",null,{"className":"flex items-center space-x-4","children":[["$","a",null,{"href":"https://www.npmjs.com/package/@wakeuplabs/op-interop-alerts-sdk","target":"_blank","rel":"noopener noreferrer","className":"hover:opacity-80 transition-opacity p-2","title":"NPM Package","children":["$","img",null,{"src":"/npm-logo-red.png","alt":"NPM","className":"h-4 w-auto"}]}],["$","a",null,{"href":"https://github.com/wakeuplabs-io/op-interop-alerts","target":"_blank","rel":"noopener noreferrer","className":"hover:opacity-80 transition-opacity p-2","title":"GitHub Repository","children":["$","img",null,{"src":"/github-mark.png","alt":"GitHub","className":"h-5 w-auto"}]}],["$","a",null,{"href":"https://wakeuplabs.io","target":"_blank","rel":"noopener noreferrer","className":"hover:opacity-80 transition-opacity p-2","title":"WakeUp Labs","children":["$","img",null,{"src":"/logo-wu-isotype.png","alt":"WakeUp Labs","className":"h-4 w-auto"}]}]]}]]}]}]}]]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/op-interop-alerts/_next/static/css/d8d0d207bb4bc00b.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$Le"]]]]]
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Examples | OP Interop Alerts SDK"}],["$","meta","3",{"name":"description","content":"Complete examples showing how to use all modules of the OP Interop Alerts SDK together for comprehensive cross-chain monitoring."}],["$","meta","4",{"name":"author","content":"WakeUp Labs"}],["$","meta","5",{"name":"keywords","content":"optimism,superchain,cross-chain,interoperability,monitoring,alerts,l2,ethereum"}],["$","meta","6",{"name":"creator","content":"WakeUp Labs"}],["$","meta","7",{"property":"og:title","content":"OP Interop Alerts SDK"}],["$","meta","8",{"property":"og:description","content":"TypeScript SDK for monitoring cross-chain interoperability across Optimism Superchain"}],["$","meta","9",{"property":"og:url","content":"https://wakeuplabs-io.github.io/op-interop-alerts/"}],["$","meta","10",{"property":"og:site_name","content":"OP Interop Alerts SDK"}],["$","meta","11",{"property":"og:locale","content":"en_US"}],["$","meta","12",{"property":"og:type","content":"website"}],["$","meta","13",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","14",{"name":"twitter:title","content":"OP Interop Alerts SDK"}],["$","meta","15",{"name":"twitter:description","content":"TypeScript SDK for monitoring cross-chain interoperability across Optimism Superchain"}],["$","link","16",{"rel":"shortcut icon","href":"/favicon-wu.svg"}],["$","link","17",{"rel":"icon","href":"/favicon-wu.svg"}],["$","link","18",{"rel":"apple-touch-icon","href":"/favicon-wu.svg"}],["$","meta","19",{"name":"next-size-adjust"}]]
1:null
